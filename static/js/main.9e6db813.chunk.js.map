{"version":3,"sources":["CodecTest.js","App.js","index.js"],"names":["canPlayType","codec","canPlay","document","createElement","isMediaTypeSupported","isTypeSupported","window","MediaSource","checkMediaCapabilities","contentType","navigator","mediaCapabilities","decodingInfo","type","video","width","height","bitrate","framerate","DEFAULT_TEST_RESULTS","undefined","CodecTest","onRemoveCodec","useState","testResults","setTestResults","useEffect","codecSwitched","result","prev","testMediaCapabilities","onClick","href","target","rel","className","supported","JSON","stringify","DELIMITER","App","useSearchParams","searchParams","setSearchParams","codecInput","setCodecInput","currentCodecs","get","split","onSubmit","evt","preventDefault","prevCodecs","nextCodecs","set","join","value","onChange","disabled","userAgent","map","filter","entry","length","delete","router","createBrowserRouter","path","element","rootElement","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.9e6db813.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction canPlayType(codec) {\n  let canPlay = null;\n  try {\n    const video = document.createElement(\"video\");\n    canPlay = video.canPlayType(codec);\n  } catch {\n    // ignore errors\n  }\n\n  return canPlay;\n}\n\nfunction isMediaTypeSupported(codec) {\n  let isTypeSupported = false;\n  try {\n    isTypeSupported =\n      window.MediaSource &&\n      typeof window.MediaSource.isTypeSupported === \"function\" &&\n      window.MediaSource.isTypeSupported(codec);\n  } catch {\n    // ignore\n  }\n\n  return isTypeSupported;\n}\n\nasync function checkMediaCapabilities(contentType) {\n  try {\n    return await navigator.mediaCapabilities.decodingInfo({\n      type: \"media-source\",\n      video: {\n        width: 800,\n        height: 600,\n        bitrate: 600,\n        framerate: 24,\n        contentType\n      }\n    });\n  } catch (e) {\n    // Ignore errors\n  }\n}\n\nconst DEFAULT_TEST_RESULTS = {\n  canPlayType: undefined,\n  isTypeSupported: undefined,\n  mediaCapabilities: undefined\n};\nfunction CodecTest({ codec, onRemoveCodec }) {\n  const [testResults, setTestResults] = useState(DEFAULT_TEST_RESULTS);\n  const contentType = `video/mp4; codecs=\"${codec}\"`;\n  useEffect(() => {\n    setTestResults({\n      ...DEFAULT_TEST_RESULTS,\n      canPlayType: canPlayType(contentType),\n      isTypeSupported: isMediaTypeSupported(contentType)\n    });\n\n    let codecSwitched = false;\n    async function testMediaCapabilities() {\n      const result = await checkMediaCapabilities(contentType);\n      if (!codecSwitched) {\n        setTestResults((prev) => ({\n          ...prev,\n          mediaCapabilities: result\n        }));\n      }\n    }\n    testMediaCapabilities();\n    return () => {\n      codecSwitched = true;\n    };\n  }, [contentType]);\n  return (\n    <div>\n      <h2>\n        {codec}\n        <button onClick={onRemoveCodec}>Remove</button>\n      </h2>\n      <h4>{contentType}</h4>\n      <dl>\n        <dt>\n          HTMLVideoElement.canPlayType()\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ↗\n          </a>\n        </dt>\n        <dd\n          className={`${testResults.canPlayType === \"\" ? \"bad\" : \"\"} ${\n            testResults.canPlayType === \"probably\" ? \"good\" : \"\"\n          }`}\n        >\n          {testResults.canPlayType === \"\" ? \"no\" : testResults.canPlayType}\n        </dd>\n        <dt>\n          MediaSource.isTypeSupported()\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ↗\n          </a>\n        </dt>\n        <dd className={`${testResults.isTypeSupported ? \"good\" : \"bad\"}`}>\n          {testResults.isTypeSupported ? \"true\" : \"false\"}\n        </dd>\n        <dt>\n          mediaCapabilities.decodingInfo()\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaCapabilities/decodingInfo\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ↗\n          </a>\n        </dt>\n        <dd\n          className={`${\n            testResults.mediaCapabilities &&\n            testResults.mediaCapabilities.supported\n              ? \"good\"\n              : \"bad\"\n          }`}\n        >\n          {testResults.mediaCapabilities\n            ? JSON.stringify(testResults.mediaCapabilities)\n            : undefined}\n        </dd>\n      </dl>\n    </div>\n  );\n}\nexport default CodecTest;\n","import { useState, Fragment } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\nimport CodecTest from \"./CodecTest\";\nimport \"./styles.css\";\n\nconst DELIMITER = \";\";\nexport default function App() {\n  let [searchParams, setSearchParams] = useSearchParams();\n  const [codecInput, setCodecInput] = useState(\"\");\n  let currentCodecs = searchParams.get(\"codecs\") || \"\";\n  currentCodecs = currentCodecs.split(DELIMITER);\n  function addTestCase(evt) {\n    evt.preventDefault();\n    setSearchParams((prev) => {\n      let prevCodecs = prev.get(\"codecs\") || \"\";\n\n      const nextCodecs = [codecInput, ...prevCodecs.split(DELIMITER)];\n      prev.set(\"codecs\", nextCodecs.join(DELIMITER));\n      return prev;\n    });\n    setCodecInput(\"\");\n  }\n\n  function onRemoveCodec(codec) {\n    setSearchParams((prev) => {\n      let prevCodecs = prev.get(\"codecs\") || \"\";\n\n      const nextCodecs = [...prevCodecs.split(DELIMITER)].filter(\n        (entry) => entry !== codec\n      );\n      if (nextCodecs.length) {\n        prev.set(\"codecs\", nextCodecs.join(DELIMITER));\n      } else {\n        prev.delete(\"codecs\");\n      }\n\n      return prev;\n    });\n  }\n  return (\n    <div className=\"App\">\n      <form onSubmit={addTestCase}>\n        <input\n          type=\"text\"\n          value={codecInput}\n          onChange={(evt) => setCodecInput(evt.target.value)}\n        />\n        <button disabled={!codecInput}>Add Codec</button>\n      </form>\n      <br />\n      <b>UserAgent</b>: {window.navigator.userAgent}\n      {currentCodecs.map(\n        (codec) =>\n          codec && (\n            <Fragment key={codec}>\n              <hr />\n              <CodecTest\n                codec={codec}\n                onRemoveCodec={() => onRemoveCodec(codec)}\n              />\n            </Fragment>\n          )\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport App from \"./App\";\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <App />\n  }\n]);\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <RouterProvider router={router} />\n  </StrictMode>\n);\n"],"sourceRoot":""}